# action.yml
name: "setup-jemalloc"
description: "An action to download, install, and cache jemalloc on Linux, macOS, and Windows runners"
author: "Jason Pearson"
inputs:
  jemalloc-version:
    description: "Version of jemalloc to use"
    required: "true"
    default: "5.3.0"
outputs: {}

runs:
  using: "composite"
  steps:

    - name: "Check Platform"
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "Cannot yet support Windows platform"
          exit 1
        fi

#    - name: "Restore jemalloc"
#      id: cache-jemalloc
#      uses: actions/cache/restore@v4
#      with:
#        path: ${{ runner.os == 'Windows' && '/tmp/libjemalloc.dll' || runner.os == 'Linux' && '/tmp/libjemalloc.so.2' || '/tmp/libjemalloc.2.dylib' }}
#        key: v5-${{ runner.os }}-jemalloc-${{ inputs.jemalloc-version }}
#
#    - name: "Relocate jemalloc to expected directory"
#      if: steps.cache-jemalloc.outputs.cache-hit == 'true'
#      shell: bash
#      run: |
#        if [ "${{ runner.os }}" == "Linux" ]; then
#          mkdir -p /usr/local/lib
#          sudo cp /tmp/libjemalloc.so.2 /usr/local/lib/
#        elif [ "${{ runner.os }}" == "macOS" ]; then
#          sudo mkdir -p /usr/local/lib
#          sudo cp /tmp/libjemalloc.2.dylib /usr/local/lib/
#        elif [ "${{ runner.os }}" == "Windows" ]; then
#          mkdir -p "$RUNNER_TEMP/jemalloc"
#          cp /tmp/libjemalloc.dll "$RUNNER_TEMP/jemalloc/jemalloc.dll"
#        fi

    - name: "Download jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -Ls https://github.com/jemalloc/jemalloc/releases/download/${{ inputs.jemalloc-version }}/jemalloc-${{ inputs.jemalloc-version }}.tar.bz2 -o jemalloc-${{ inputs.jemalloc-version }}.tar.bz2

    - name: "Unzip jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: tar xvf jemalloc-${{ inputs.jemalloc-version }}.tar.bz2

    - name: "Compilation Tool Setup"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd jemalloc-${{ inputs.jemalloc-version }}
        if [ "${{ runner.os }}" == "Windows" ]; then
          # Install MSYS2 for compatible build tools
          choco install msys2 -y
          # Add MSYS2 binaries to PATH
          echo "C:\\tools\\msys64\\usr\\bin" >> $GITHUB_PATH
          echo "C:\\tools\\msys64\\mingw64\\bin" >> $GITHUB_PATH
        fi

    - name: "Pacman Tool Setup"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          # Update package database
          C:\\tools\\msys64\\usr\\bin\\bash.exe -c "pacman -Sy --noconfirm"
          # Download packages
          C:\\tools\\msys64\\usr\\bin\\bash.exe -c "pacman -S --noconfirm mingw-w64-x86_64-gcc mingw-w64-x86_64-make"
          # Update transitive dependencies if needed
          C:\\tools\\msys64\\usr\\bin\\bash.exe -c "pacman -Syu --noconfirm"
        fi

    - name: "Configure and install jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd jemalloc-${{ inputs.jemalloc-version }}
        if [ "${{ runner.os }}" == "Linux" ]; then
          # --with-huge-page-size=$(awk '/Hugepagesize:/ {print $2/1024 "MB"}' /proc/meminfo)
          ./configure
          make
          sudo make install
        elif [ "${{ runner.os }}" == "macOS" ]; then
          # TODO: grab this properly
          # export PAGE_SIZE=$(sysctl -a | awk '/hw.pagesize/ {print $2/1024 "KB"}')
          ./configure --with-lg-page=16 --with-lg-hugepage=16 --host=arm-apple-darwin CFLAGS="-target arm64e-apple-macos" LDFLAGS="-target arm64e-apple-macos"
          make
          sudo make install
          echo ""
          lipo -info /usr/local/lib/libjemalloc.2.dylib
        elif [ "${{ runner.os }}" == "Windows" ]; then
          export CC=cl; source ../before_install.sh
          ./configure
          autoconf
          mingw32-make -j3
          mingw32-make -k check
          cp ./lib/libjemalloc.dll "$RUNNER_TEMP/jemalloc/jemalloc.dll"
        fi

    - name: "Configure LD_PRELOAD (or equivalent)"
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          echo 'LD_PRELOAD=/usr/local/lib/libjemalloc.so.2' >> $GITHUB_ENV
          mkdir -p /tmp
          cp /usr/local/lib/libjemalloc.so.2 /tmp/
        elif [ "${{ runner.os }}" == "macOS" ]; then
          find jemalloc-${{ inputs.jemalloc-version }}/lib
          echo 'DYLD_FORCE_FLAT_NAMESPACE=1' >> $GITHUB_ENV
          echo 'DYLD_INSERT_LIBRARIES=/usr/local/lib/libjemalloc.2.dylib' >> $GITHUB_ENV
          mkdir -p /tmp
          cp /usr/local/lib/libjemalloc.2.dylib /tmp/
        elif [ "${{ runner.os }}" == "Windows" ]; then
          cp "$RUNNER_TEMP/jemalloc/jemalloc.dll" /tmp/
          echo "$RUNNER_TEMP/jemalloc/jemalloc.dll" >> $GITHUB_PATH
        fi

#    - name: "Save jemalloc"
#      uses: actions/cache/save@v4
#      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
#      with:
#        path: ${{ runner.os == 'Windows' && '/tmp/libjemalloc.dll' || runner.os == 'Linux' && '/tmp/libjemalloc.so.2' || '/tmp/libjemalloc.2.dylib' }}
#        key: v5-${{ runner.os }}-jemalloc-${{ inputs.jemalloc-version }}

branding:
  icon: "cpu"
  color: "blue"


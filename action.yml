# action.yml
name: "setup-jemalloc"
description: "An action to download, install, and cache jemalloc on Linux, macOS, and Windows runners"
author: "Jason Pearson"
inputs:
  jemalloc-version:
    description: "Version of jemalloc to use"
    required: "true"
    default: "5.3.0"
outputs: {}

runs:
  using: "composite"
  steps:
    - name: "Install MSYS2 on Windows"
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      run: |
        # Install MSYS2 for compatible build tools
        choco install msys2 -y
        # Add MSYS2 binaries to PATH
        echo "C:\\tools\\msys64\\usr\\bin" >> $GITHUB_PATH
        echo "C:\\tools\\msys64\\mingw64\\bin" >> $GITHUB_PATH

    - name: "Restore jemalloc"
      id: cache-jemalloc
      uses: actions/cache/restore@v4
      with:
        path: ${{ runner.os == 'Windows' && '/tmp/libjemalloc.dll' || runner.os == 'Linux' && '/tmp/libjemalloc.so.2' || '/tmp/libjemalloc.2.dylib' }}
        key: v4-${{ runner.os }}-jemalloc-${{ inputs.jemalloc-version }}

    - name: "Relocate jemalloc to expected directory"
      if: steps.cache-jemalloc.outputs.cache-hit == 'true'
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          sudo mv /tmp/libjemalloc.so.2 /usr/local/lib/
        elif [ "${{ runner.os }}" == "macOS" ]; then
          sudo mv /tmp/libjemalloc.2.dylib /usr/local/lib/
        elif [ "${{ runner.os }}" == "Windows" ]; then
          mv /tmp/libjemalloc.dll "C:\\Program Files\\jemalloc\\"
        fi

    - name: "Download jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        curl -Ls https://github.com/jemalloc/jemalloc/releases/download/${{ inputs.jemalloc-version }}/jemalloc-${{ inputs.jemalloc-version }}.tar.bz2 -o jemalloc-${{ inputs.jemalloc-version }}.tar.bz2

    - name: "Unzip jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: tar xvf jemalloc-${{ inputs.jemalloc-version }}.tar.bz2

    - name: "Configure and install jemalloc"
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd jemalloc-${{ inputs.jemalloc-version }}
        if [ "${{ runner.os }}" == "Linux" ] || [ "${{ runner.os }}" == "macOS" ]; then
          ./configure
          make
          sudo make install
        elif [ "${{ runner.os }}" == "Windows" ]; then
          # Use MSYS2 for compatible build tools
          ./configure
          make
          cp ./lib/libjemalloc.dll "C:\\Program Files\\jemalloc\\jemalloc.dll"
        fi

    - name: "Configure LD_PRELOAD (or equivalent)"
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          echo 'export LD_PRELOAD=/usr/local/lib/libjemalloc.so.2' >> $GITHUB_ENV
          cp /usr/local/lib/libjemalloc.so.2 /tmp/
        elif [ "${{ runner.os }}" == "macOS" ]; then
          echo 'export DYLD_INSERT_LIBRARIES=/usr/local/lib/libjemalloc.2.dylib' >> $GITHUB_ENV
          cp /usr/local/lib/libjemalloc.2.dylib /tmp/
        elif [ "${{ runner.os }}" == "Windows" ]; then
          echo "C:\\Program Files\\jemalloc\\jemalloc.dll" >> $GITHUB_PATH
        fi

    - name: "Save jemalloc"
      uses: actions/cache/save@v4
      if: steps.cache-jemalloc.outputs.cache-hit != 'true'
      with:
        path: ${{ runner.os == 'Windows' && '/tmp/libjemalloc.dll' || runner.os == 'Linux' && '/tmp/libjemalloc.so.2' || '/tmp/libjemalloc.2.dylib' }}
        key: v4-${{ runner.os }}-jemalloc-${{ inputs.jemalloc-version }}

branding:
  icon: "cpu"
  color: "blue"

